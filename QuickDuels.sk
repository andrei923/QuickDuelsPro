import:
	java.lang.Math
	org.bukkit.Bukkit	
	org.bukkit.Sound	
	org.bukkit.Material		
	org.bukkit.util.Vector
	org.bukkit.material.MaterialData	 		
	com.leaf.nbt.nbtapi.NBTItem
	com.leaf.nbt.nbtapi.NBTEntity	
	com.leaf.nbt.nbtapi.NBTContainer	
	fr.mrmicky.fastparticle.FastParticle
	fr.mrmicky.fastparticle.ParticleType	
	org.bukkit.event.player.PlayerInteractEvent
	org.bukkit.event.player.PlayerArmorStandManipulateEvent	

	
options:

	#do not touch this -_-
	plugin-version: 1.0.0


local effect create scoreboard for %player%:	
	trigger:
		if {-duels::cache::TitleManager}.hasScoreboard(expr-1) is true:
			{-duels::cache::TitleManager}.removeScoreboard(expr-1)
		{-duels::cache::TitleManager}.giveScoreboard(expr-1)

local effect delete scoreboard of %player%:	
	trigger:
		{-duels::cache::TitleManager}.removeScoreboard(expr-1)	

local effect set scoreboard title of %player% to %string%:	
	trigger:
		{-duels::cache::TitleManager}.setScoreboardTitle(expr-1 and expr-2)

local effect set scoreboard line %number% of %player% to %string%:	
	trigger:
		{-duels::cache::TitleManager}.setScoreboardValue(expr-2, expr-1 and expr-3)

function check_yaml(dir: text, value: text, set: text, type: text = "TEXT"):
	yaml value {_value} from "leaf.duels.%{_dir}%" is not set:
		if {_type} is "text":
			set yaml value {_value} from "leaf.duels.%{_dir}%" to {_set}
		if {_type} is "number":
			set yaml value {_value} from "leaf.duels.%{_dir}%" to {_set} parsed as number
		if {_type} is "boolean":
			set yaml value {_value} from "leaf.duels.%{_dir}%" to {_set} parsed as boolean
	if {_type} is "list":
		yaml list {_value} from "leaf.duels.%{_dir}%" is not set
		loop {_set} split at "||":
			add loop-value to yaml list {_value} from "leaf.duels.%{_dir}%"

expression %item% with [custom] nbt %string%:
	return type: item
	get:
		if expr-1 = air:
			return
		set {_nbti} to new NBTItem(expr-1)
		{_nbti}.mergeCompound(new NBTContainer(expr-2))
		return {_nbti}.getItem()
		
expression %item% with [leaf] lore %texts%:
	return type: item
	get:
		set {_r} to expr-1
		loop expressions 2:
			set {_lore} to loop-value-1
			add 1 to {_line}			
			set line {_line} of lore of {_r} to colored {_lore}		
		return {_r}

#From https://forums.skunity.com/resources/mirrorutils.706/ by EWS
local expression replacer %texts% with %texts% in %text%:
	return type: text
	get:
		set {_result} to expr-3
		loop exprs-1:
			add 1 to {_n}
			replace all "%loop-value-1%" with ({_n}th element of exprs-2 ? "") in {_result}
		return {_result}	

local effect [leaf] hide %player% from %player%:
	trigger:
		expr-2.hidePlayer(expr-1)

local effect [leaf] show %player% to %player%:
	trigger:
		expr-2.showPlayer(expr-1)

command duels [<text = help>] [<text>] [<text>] [<number>]:
	aliases: QuickDuels
	executable by: players
	trigger:
		if arg-1 is "help": 
			send centered "&7☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁" to player
			send "&a/duels play"
			send "&a/duels kit edit, &e(&7while editing &asave &7& &creset&e)"	
			send "&a/duels leave"
			send centered "&7☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁" to player
			if player has permission "duels.admin":	
				send centered "&7☁☁☁☁☁☁ &e&nGeneral Setup&r ☁☁☁☁☁☁" to player		
				send "&e/duels saveKit &8(&7kit_name&8)"													
				send "&e/duels setLobby"	
				send "&e/duels setKitEdit"								
				send centered "&7☁☁☁☁☁☁ &e&nMap Setup&r ☁☁☁☁☁☁" to player					
				send "&e/duels createMap &8(&7map_name&8)"								
				send "&e/duels setPos &8(&7map_name&8) &8(&a1&7/&a2&8) "							
				send "&e/duels setSpawn &8(&7map_name&8) &8(&7&cRed|&bBlue8)"		
				send "&e/duels saveMap &8(&7map_name&8)"							
				send "&e/duels deleteMap &8(&7map_name&8)"
				send centered "&7☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁" to player
				stop
		if arg-1 is "play":	
			if {-duels::cache::player::%player%::state} is not set:	
				open chest inventory with yaml value "Menus.Play.Size" from "leaf.duels.config" rows named yaml value "Menus.Play.Menu" from "leaf.duels.config" to player
				wait a tick		
				loop yaml nodes with keys "Kits" from "leaf.duels.kits":
					set {_mode} to loop-value-1
					set {_teamSize} to yaml value "Kits.%{_mode}%.TeamSize" from "leaf.duels.kits"
					#
					set {_quequed.%{_mode}%} to 0
					set {_playing.%{_mode}%} to 0
					loop all players:
						if {-duels::cache::player::%loop-value-1%::state} is set:
							if {-duels::cache::arena::%{-duels::cache::player::%loop-value-1%::arena}%::kit} is {_mode}:
								add 1 to {_playing.%{_mode}%}
					set {_lore::*} to yaml list "Kits.%{_mode}%.Display.Lore" from "leaf.duels.kits"
					replace all "{waiting}" with "%size of {-duels::cache::queque::%{_teamSize}%::%{_mode}%::*}%" in {_lore::*}
					replace all "{playing}" with "%{_quequed.%{_mode}%}%" in {_lore::*}
					#
					if {_playing.%{_mode}%} > 1:
						if {_playing.%{_mode}%} <= 64:
							set {_display} to {_playing.%{_mode}%} of {-duels::cache::kits::%{_mode}%::display}
						else:
							set {_display} to {-duels::cache::kits::%{_mode}%::display}					
					else:
						set {_display} to {-duels::cache::kits::%{_mode}%::display}
					make a gui slot yaml value "Kits.%{_mode}%.Display.Slot" from "leaf.duels.kits" of player with {_display} with leaf lore {_lore::*} to run:
						close player's inventory
						duels_join_queque(player, {_teamSize}, {_mode})
				if {-duels::cache::player::%player%::queque} is set:
					make a gui slot yaml value "Menus.Play.Cancel.Slot" from "leaf.duels.config" of player with {-duels::cache::Items::Cancel} to run:
						close player's inventory
						duels_leave(player)
		if arg-1 is "stats":		
			if {-duels::cache::player::%player%::state} is not set:	
				open chest inventory with 1 rows named yaml value "Menus.Stats.Menu" from "leaf.duels.config" to player
				wait a tick									
				set {_lore::*} to yaml list "Menus.Stats.Lore" from "leaf.duels.config"
				loop "PlayedGames", "Wins", "Kills", "Loses", "BlocksDestroyed" and "BlocksPlaced":
					set {_int} to yaml value "Stats.%loop-value-1%" from "leaf.duels.playerdata.%uuid of player%"
					replace all "{%loop-value-1%}" with "%{_int}%" in {_lore::*}
				make a gui slot 4 of player with paper named yaml value "Menus.Stats.Name" from "leaf.duels.config" with leaf lore {_lore::*} to do nothing				
		if arg-1 is "Kit":
			if {-duels::cache::player::%player%::state} is not set:	
				if arg-2 is "edit":
					if {-duels::cache::player::%player%::kitEdit} is set:
						stop
					open chest inventory with yaml value "Menus.Play.Size" from "leaf.duels.config" rows named yaml value "Menus.KitEdit.Menu" from "leaf.duels.config" to player
					wait a tick		
					loop yaml nodes with keys "Kits" from "leaf.duels.kits":
						set {_mode} to loop-value-1
						set {_icon} to {-duels::cache::kits::%{_mode}%::display}
						delete lore of {_icon}
						make a gui slot yaml value "Kits.%{_mode}%.Display.Slot" from "leaf.duels.kits" of player with {_icon} to run:
							duels_inventory_manager(player, "save")
							wait a tick
							close player's inventory			
							duels_clear_player(player)
							teleport player to yaml value "Locations.KitEditor" from "leaf.duels.config"
							set {-duels::cache::player::%player%::kitEdit} to {_mode}
							duels_kits_manager(player, "give", {_mode})
				if arg-2 is "save":		
					if {-duels::cache::player::%player%::CannotSave} is set:
						stop
					if {-duels::cache::player::%player%::kitEdit} is not set:
						stop
					duels_kits_manager(player, "editKitSave", {-duels::cache::player::%player%::kitEdit})
					close player's inventory
					teleport player to yaml value "Locations.Lobby" from "leaf.duels.config"
					wait a tick
					duels_clear_player(player)
					delete {-duels::cache::player::%player%::kitEdit}	
					duels_inventory_manager(player, "restore")
				if arg-2 is "reset":		
					if {-duels::cache::player::%player%::kitEdit} is set:
						set {-duels::cache::player::%player%::CannotSave} to true
						duels_kits_manager(player, "reset", {-duels::cache::player::%player%::kitEdit})
						duels_clear_player(player)
						wait a second
						{-duels::cache::player::%player%::kitEdit} is set
						duels_kits_manager(player, "give", {-duels::cache::player::%player%::kitEdit})
						delete {-duels::cache::player::%player%::CannotSave}				
		if arg-1 is "leave":	
			duels_leave(player)
		if arg-1 is "createMap":	
			if player has permission "duels.admin":		
				if arg-2 is set:
					if yaml value "%arg-2%.State" from "leaf.duels.maps" is not set:
						set yaml value "%arg-2%.State" from "leaf.duels.maps" to "created"
						send "&7⚙&e〉&aMap &c%arg-2% &ahas been created!"
						make player execute command "duels setSpawn %arg-2% Red"
						save yaml "leaf.duels.maps"
					else:
						send "&aThis map already exists!"	
				else:
					send "&cMap not found."																				
		if arg-1 is "setSpawn":
			if player has permission "duels.admin":		
				if yaml value "%arg-2%.State" from "leaf.duels.maps" is "created" or "ready":
					if arg-3 is "Red":
						set yaml value "%arg-2%.Spawn.Red" from "leaf.duels.maps" to location of player
						send "&7⚙&e〉&cRed &aSpawn for Map &3%arg-2% &ahas been set!"			
						save yaml "leaf.duels.maps"		
						stop
					if arg-3 is "Blue":
						set yaml value "%arg-2%.Spawn.Blue" from "leaf.duels.maps" to location of player
						send "&7⚙&e〉&bBlue &aSpawn for Map &3%arg-2% &ahas been set!"			
						save yaml "leaf.duels.maps"			
						stop					
					else:
						send "&7⚙&e〉&aPlease specify team name."
				else:
					send "&cMap not found."	
		if arg-1 is "setPos" or "setPosition":
			if player has permission "duels.admin":		
				if yaml value "%arg-2%.State" from "leaf.duels.maps" is "created" or "ready":
					if arg-3 is "1" or "2":
						set yaml value "%arg-2%.Position.%arg-3%" from "leaf.duels.maps" to location of player
						send "&7⚙&e〉&aPosition &3%arg-3% &afor Map &3%arg-2% &ahas been set!"
					else:
						send "&7⚙&e〉&a1 or 2!" 
				else:
					send "&cMap not found."																																																																																
		if arg-1 is "setLobby":	
			if player has permission "duels.admin":
				set yaml value "Locations.Lobby" from "leaf.duels.config" to location of player
				save yaml "leaf.duels.config"
				send "&7⚙&e〉&aLobby set."	
		if arg-1 is "setKitEdit":	
			if player has permission "duels.admin":
				set yaml value "Locations.KitEditor" from "leaf.duels.config" to location of player
				save yaml "leaf.duels.config"
				send "&7⚙&e〉&aKit editor location set."				
		if arg-1 is "saveKit":	
			if player has permission "duels.admin":
				if arg-2 is set:
					if yaml value "Kits.%arg-2%.Display.Name" from "leaf.duels.kits" is not set:
						set yaml value "Kits.%arg-2%.TeamSize" from "leaf.duels.kits" to 1
						set yaml value "Kits.%arg-2%.Display.Name" from "leaf.duels.kits" to "&a%arg-2%"
						if player's tool is not set:
							set yaml value "Kits.%arg-2%.Display.Item" from "leaf.duels.kits" to "stone axe"
						else:
							set yaml value "Kits.%arg-2%.Display.Item" from "leaf.duels.kits" to "%type of player's tool%"		
						set yaml value "Kits.%arg-2%.Display.Slot" from "leaf.duels.kits" to size of yaml nodes with keys "Kits" from "leaf.duels.kits"+1							
						set yaml list "Kits.%arg-2%.Display.Lore" from "leaf.duels.kits" to "&7❒ &fMode ⤵" and "" and "&8➥ &aPlaying &7{playing}" and "&8➥ &aQuequed &7{waiting}"
					save yaml "leaf.duels.kits"	
					duels_kits_manager(player, "save", arg-2)										
					send "&7⚙&e〉&aKit &3%arg-2% &asaved."
					wait a tick	
					duels_reloadKits()
				else:
					send "&7⚙&e〉&aYou need to specify a name for it."																					
		if arg-1 is "reload":		
			if player has permission "duels.admin":
				broadcast "&7⚙&e〉&aReloading..."
				wait a tick
				make console execute command "sk reload %script%"
		if arg-1 is "saveMap":	
			if player has permission "duels.admin":	
				if yaml value "%arg-2%.State" from "leaf.duels.maps" is "ready":
					send "&7⚙&e〉&aThis map is already created, saving the changes if there's any..." 
					set yaml value "%arg-2%.State" from "leaf.duels.maps" to "created"
					make player execute command "duels saveMap %arg-2%"
					stop			
				if yaml value "%arg-2%.State" from "leaf.duels.maps" is "created":
					if yaml value "%arg-2%.Position.1" from "leaf.duels.maps" is set:
						if yaml value "%arg-2%.Position.2" from "leaf.duels.maps" is set:
							if yaml value "%arg-2%.Spawn.Blue" from "leaf.duels.maps" is set:
								if yaml value "%arg-2%.Spawn.Red" from "leaf.duels.maps" is set:
									set yaml value "%arg-2%.State" from "leaf.duels.maps" to "ready"
									add arg-2 to {-duels::cache::maps::*}
									save yaml "leaf.duels.maps"
									save schematic "plugins/QuickDuels/maps/%arg-2%.schem" from yaml value "%arg-2%.Position.1" from "leaf.duels.maps" and yaml value "%arg-2%.Position.2" from "leaf.duels.maps"
									send "&7⚙&e〉&aMap &c%arg-2% &ahas been saved."
								else:
									send "&7⚙&e〉&aSpawn for &cRed &ateam is not set!" 							
							else:
								send "&7⚙&e〉&aSpawn for &bBlue &ateam is not set!" 
						else:
							send "&7⚙&e〉&aPosition 2 is not set!"								
					else:
						send "&7⚙&e〉&aPosition 1 is not set!" 																																																																																																																								
				else:
					send "&7⚙&e〉&aYou didn't created this arena yet."
		if arg-1 is "debug":	
			if player has permission "duels.admin":
				send "&fArena: &a%{-duels::cache::player::%player%::arena}%"	
				send "&fStatus: &a%{-duels::cache::arena::%{-duels::cache::player::%player%::arena}%::status}%"	
				send "&fPlayers: &a%size of {-duels::cache::arena::%{-duels::cache::player::%player%::arena}%::ninjas::*}%"	
				send "&fCurren Team: &a%{-duels::cache::player::%player%::team}%"	
				loop "Red" and "Blue":
					send "&aTeam <%loop-value-1%>%loop-value-1%, &fPlayers: &c%{-duels::cache::arena::%{-duels::cache::player::%player%::arena}%::team::%loop-value-1%::*}%"
		if arg-1 is "deleteMap":	
			if player has permission "duels.admin":		
				if yaml value "%arg-2%.State" from "leaf.duels.maps" is set:
					delete yaml value arg-2 from "leaf.duels.maps"					
					send "&7⚙&e〉&aMap &c%arg-2% &ahas been deleted."
					save yaml "leaf.duels.maps"
				else:
					send "&cMap not found."
	
function duels_stats(p: player, do: text, type: text = "check", amount: number = 1):
	if yaml "leaf.duels.playerdata.%uuid of {_p}%" is not loaded:
		load yaml "plugins/QuickDuels/playerdata/%uuid of {_p}%.yml" as "leaf.duels.playerdata.%uuid of {_p}%"	
	{_do} is "check":
		loop "PlayedGames", "Wins", "Kills", "Loses", "BlocksPlaced" and "BlocksDestroyed": 
			if yaml value "Stats.%loop-value-1%" from "leaf.duels.playerdata.%uuid of {_p}%" is not set:
				set yaml value "Stats.%loop-value-1%" from "leaf.duels.playerdata.%uuid of {_p}%" to 0
	{_do} is "add":
		set yaml value "Stats.%{_type}%" from "leaf.duels.playerdata.%uuid of {_p}%" to yaml value "Stats.%{_type}%" from "leaf.duels.playerdata.%uuid of {_p}%" + {_amount}
	save yaml "leaf.duels.playerdata.%uuid of {_p}%"

function duels_tab_support(p: player, task: string, value: string = "null"):	
	if {_task} is "Clear":
		{-duels::cache::TabPlugin::TAB}.getPlayer({_p}.getUniqueId()).setValueTemporarily({-duels::cache::TabPlugin::TABEnumProperty}.TABPREFIX and {-duels::cache::TabPlugin::TAB}.getOriginalValue({_p}.getUniqueId() and {-duels::cache::TabPlugin::TABEnumProperty}.TABPREFIX))
		{-duels::cache::TabPlugin::TAB}.getPlayer({_p}.getUniqueId()).setValueTemporarily({-duels::cache::TabPlugin::TABEnumProperty}.TABSUFFIX and {-duels::cache::TabPlugin::TAB}.getOriginalValue({_p}.getUniqueId() and {-duels::cache::TabPlugin::TABEnumProperty}.TABSUFFIX))
	if {_task} is "SetPrefix":		
		{-duels::cache::TabPlugin::TAB}.getPlayer({_p}.getUniqueId()).setValueTemporarily({-duels::cache::TabPlugin::TABEnumProperty}.TABPREFIX and {_value})
		{-duels::cache::TabPlugin::TAB}.getPlayer({_p}.getUniqueId()).setValueTemporarily({-duels::cache::TabPlugin::TABEnumProperty}.TAGPREFIX and {_value})
	if {_task} is "SetSuffix":
		{-duels::cache::TabPlugin::TAB}.getPlayer({_p}.getUniqueId()).setValueTemporarily({-duels::cache::TabPlugin::TABEnumProperty}.TABSUFFIX and {_value})
		{-duels::cache::TabPlugin::TAB}.getPlayer({_p}.getUniqueId()).setValueTemporarily({-duels::cache::TabPlugin::TABEnumProperty}.TAGSUFFIX and {_value})	

function duels_inventory_manager(p: player, type: text):
	set {_int} to 0
	if {_type} = "save":
		{-duels::cache::player::%{_p}%::inventory::*} is set:
			stop
		loop 36 times:
			if slot {_int} of {_p}'s inventory != air:
				set {-duels::cache::player::%{_p}%::inventory::%{_int}%} to slot {_int} of {_p}'s inventory
			add 1 to {_int}
		set {-duels::cache::player::%{_p}%::inventory::Helmet} to {_p}'s helmet
		set {-duels::cache::player::%{_p}%::inventory::Chestplate} to {_p}'s chestplate
		set {-duels::cache::player::%{_p}%::inventory::Leggings} to {_p}'s legging
		set {-duels::cache::player::%{_p}%::inventory::Boots} to {_p}'s boots	
	if {_type} = "restore":
		loop 36 times:
			{-duels::cache::player::%{_p}%::inventory::%{_int}%} is set:
				set slot {_int} of {_p}'s inventory to {-duels::cache::player::%{_p}%::inventory::%{_int}%}
			add 1 to {_int}
		set {_p}'s helmet to {-duels::cache::player::%{_p}%::inventory::Helmet}
		set {_p}'s chestplate to {-duels::cache::player::%{_p}%::inventory::Chestplate}
		set {_p}'s legging to {-duels::cache::player::%{_p}%::inventory::Leggings}
		set {_p}'s boots to {-duels::cache::player::%{_p}%::inventory::Boots}
		delete {-duels::cache::player::%{_p}%::inventory::*}

function duels_kits_manager(p: player, type: text, kit: string):
	set {_int} to 0
	if {_type} is "editKitSave":
		set {_dir} to "leaf.duels.kits"
	else:
		set {_dir} to "leaf.duels.playerdata.%uuid of {_p}%"
		if yaml value "Kits.%{_kit}%" from {_dir} is set:
			delete yaml value "Kits.%{_kit}%.Armor" from {_dir}
			delete yaml value "Kits.%{_kit}%.Items" from {_dir}
		if {_type} = "reset":
			stop
	if {_type} is "save" or "editKitSave":
		loop 36 times:
			if slot {_int} of {_p}'s inventory is not air:
				set yaml value "Kits.%{_kit}%.Items.Slot.%{_int}%" from {_dir} to slot {_int} of {_p}'s inventory
			add 1 to {_int}
		set yaml value "Kits.%{_kit}%.Armor.Helmet" from {_dir} to {_p}'s helmet
		set yaml value "Kits.%{_kit}%.Armor.Chestplate" from {_dir} to {_p}'s chestplate
		set yaml value "Kits.%{_kit}%.Armor.Leggings" from {_dir} to {_p}'s legging
		set yaml value "Kits.%{_kit}%.Armor.Boots" from {_dir} to {_p}'s boots
		save yaml {_dir}	
	if {_type} is "give":
		if yaml value "Kits.%{_kit}%.Armor.Helmet" from "leaf.duels.playerdata.%uuid of {_p}%" is set:
			set {_dir} to "leaf.duels.playerdata.%uuid of {_p}%"
		else:
			set {_dir} to "leaf.duels.kits"					
		loop 36 times:
			yaml value "Kits.%{_kit}%.Items.Slot.%{_int}%" from {_dir} is set:
				set slot {_int} of {_p}'s inventory to yaml value "Kits.%{_kit}%.Items.Slot.%{_int}%" from {_dir}
			add 1 to {_int}
		set {_p}'s helmet to yaml value "Kits.%{_kit}%.Armor.Helmet" from {_dir}
		set {_p}'s chestplate to yaml value "Kits.%{_kit}%.Armor.Chestplate" from {_dir}
		set {_p}'s legging to yaml value "Kits.%{_kit}%.Armor.Leggings" from {_dir}
		set {_p}'s boots to yaml value "Kits.%{_kit}%.Armor.Boots" from {_dir}

function duels_leave(p: player):
	if {-duels::cache::player::%{_p}%::queque} is set:
		loop yaml nodes with keys "Kits" from "leaf.duels.kits":
			remove {_p} from {-duels::cache::queque::%{-duels::cache::player::%{_p}%::queque}%::%loop-value-1%::*}
	if {-duels::cache::player::%{_p}%::state} is set:
		if {-duels::cache::player::%{_p}%::state} is "IN-GAME":		
			duels_remove_from_game({_p}, true)
			send replacer "{player}" with {_p}'s display name in yaml value "Messages.Leave" from "leaf.duels.config" to {-duels::cache::arena::%{-duels::cache::player::%{_p}%::arena}%::ninjas::*}		
		duels_clear_player({_p})
		delete scoreboard of {_p}
		teleport {_p} to yaml value "Locations.Lobby" from "leaf.duels.config"		
		duels_tab_support({_p}, "Clear")
		duels_inventory_manager({_p}, "restore")
	delete {-duels::cache::player::%{_p}%::*}		

function duels_join_queque(p: player, teamSize: number = 1, kit: string = "Quick"):
	if {-duels::cache::player::%{_p}%::state} is not set:
		if {-duels::cache::player::%{_p}%::queque} is set:
			send yaml value "Messages.AlreadySearching" from "leaf.duels.config" to {_p}
			stop
		send yaml value "Messages.SearchingOpponent" from "leaf.duels.config" to {_p}
		set {-duels::cache::player::%{_p}%::queque} to {_teamSize}
		add {_p} to {-duels::cache::queque::%{_teamSize}%::%{_kit}%::*}
		while {-duels::cache::player::%{_p}%::queque} is set:
			if size of {-duels::cache::queque::%{_teamSize}%::%{_kit}%::*} = {_teamSize}*2:
			#if 1 is 1:
				loop 1000 times:
					if {-duels::cache::arena::%loop-value-1%::status} is not set:
						set {_arena} to "%loop-value-1%"	
						stop loop
				loop 1000 times:
					set {_PasteCoords} to loop-number*1000
					if {-duels::cache::ArenaGenerator::Region::%{_PasteCoords}%} is not set:
						set {-duels::cache::arena::%{_arena}%::PasteCoords} to {_PasteCoords}
						set {-duels::cache::ArenaGenerator::Region::%{_PasteCoords}%} to true
						stop loop						
				#Generating arena...
				#broadcast "%{_PasteCoords}%"
				set {_map} to a random element out of {-duels::cache::maps::*}
				set {-duels::cache::arena::%{_arena}%::Position1} to yaml value "%{_map}%.Position.1" from "leaf.duels.maps"
				set {-duels::cache::arena::%{_arena}%::Position2} to yaml value "%{_map}%.Position.2" from "leaf.duels.maps"
				set {-duels::cache::arena::%{_arena}%::Spawn::Red} to yaml value "%{_map}%.Spawn.Red" from "leaf.duels.maps"
				set {-duels::cache::arena::%{_arena}%::Spawn::Blue} to yaml value "%{_map}%.Spawn.Blue" from "leaf.duels.maps"

				add {_PasteCoords} to x-coords of {-duels::cache::arena::%{_arena}%::Spawn::Red}
				add {_PasteCoords} to x-coords of {-duels::cache::arena::%{_arena}%::Spawn::Blue}

				add {_PasteCoords} to x-coords of {-duels::cache::arena::%{_arena}%::Position1}
				add {_PasteCoords} to x-coords of {-duels::cache::arena::%{_arena}%::Position2}
				set {-duels::cache::arena::%{_arena}%::MaxHeight} to y-coords of {-duels::cache::arena::%{_arena}%::Spawn::Red} + yaml value "Settings.MaxHeight" from "leaf.duels.config"
				paste schematic "plugins/QuickDuels/maps/%{_map}%.schem" at {-duels::cache::arena::%{_arena}%::Position1}
				#Generating arena...	

				set {-duels::cache::arena::%{_arena}%::status} to "IN-GAME"
				set {-duels::cache::arena::%{_arena}%::kit} to {_kit} 
				set {-duels::cache::arena::%{_arena}%::teamSize} to {_teamSize} 
				loop {-duels::cache::queque::%{_teamSize}%::%{_kit}%::*}:
					delete {-duels::cache::player::%loop-value-1%::queque}
					remove loop-value-1 from {-duels::cache::queque::%{_teamSize}%::%{_kit}%::*}
					send yaml value "Messages.OpponentFound" from "leaf.duels.config" to loop-value-1
					duels_inventory_manager(loop-value-1, "save")
					duels_clear_player(loop-value-1)
					set {-duels::cache::player::%loop-value-1%::state} to "IN-GAME"
					set {-duels::cache::player::%loop-value-1%::arena} to {_arena}				
					add loop-value-1 to {-duels::cache::arena::%{_arena}%::ninjas::*}
					wait a tick
				wait a second	
				duels_start({_arena})	
				stop
			add 1 to {_int}
			if {_int} = 6:
				set {_int} to 0
				send yaml value "Messages.SearchingOpponent" from "leaf.duels.config" to {_p}
			wait a second																	
	else:
		send yaml value "Messages.AlreadyPlaying" from "leaf.duels.config" to {_p}

function duels_play_sound(p: player, soundLegacy: string, soundNew: string):
	if minecraft version contains "1.8":
		{_p}.playSound(location of {_p}, Sound..{_soundLegacy}, 1 and 1)	
	else:	
		{_p}.playSound(location of {_p}, Sound..{_soundNew}, 1 and 1)	

function duels_selectTeams(arena: text):
	loop {-duels::cache::arena::%{_arena}%::ninjas::*}:
		if size of {-duels::cache::arena::%{_arena}%::team::Blue::*} < {-duels::cache::arena::%{_arena}%::teamSize}:
			set {_team} to "Blue"
		else:
			set {_team} to "Red"
		set {-duels::cache::player::%loop-value-1%::team} to {_team}
		add loop-value-1 to {-duels::cache::arena::%{_arena}%::team::%{_team}%::*}

function duels_clear_player(p: player):						
	heal {_p}
	extinguish {_p}
	set {_p}'s food to 20	
	clear {_p}'s level
	clear {_p}'s inventory
	{_p}.setFlying(false)
	{_p}.setAllowFlight(false)	
	set {_p}'s gamemode to survival
	loop ...{_p}.getActivePotionEffects():
		{_p}.removePotionEffect(loop-value.getType())	
	set velocity of {_p} to new vector 0, 0, 0	
	delete metadata value "DUELS_DEAD" of {_p}
	delete metadata value "DUELS_KILLER" of {_p}	

function duels_start(arena: text):
	set {-duels::cache::arena::%{_arena}%::status} to "IN-GAME"
	duels_selectTeams({_arena})
	duels_gametime({_arena})
	wait a second
	loop {-duels::cache::arena::%{_arena}%::ninjas::*}:
		set {-duels::cache::player::%loop-value-1%::GameKills} to 0	
		set metadata value "DUELS_OWNER" of loop-value-1 to loop-value-1
		teleport loop-value-1 to {-duels::cache::arena::%{_arena}%::Spawn::%{-duels::cache::player::%loop-value-1%::team}%}
		duels_createBoard(loop-value-1, "DUELS-GAME")
		duels_stats(loop-value-1, "add", "PlayedGames")	
		duels_tab_support(loop-value-1, "SetPrefix", yaml value "Settings.TeamFormat.Color.%{-duels::cache::player::%{_p}%::team}%" from "leaf.duels.config")
		send replacer "{player}" and "{players-count}" with loop-value-1's display name and "%size of {-duels::cache::arena::%{_arena}%::ninjas::*}%" in yaml value "Messages.Join" from "leaf.duels.config" to {-duels::cache::arena::%{_arena}%::ninjas::*}		

	#Separe players.
	loop all players:	
		loop {-duels::cache::arena::%{_arena}%::ninjas::*}:
			if {-duels::cache::player::%loop-value-1%::arena} is {-duels::cache::player::%loop-value-2%::arena}:
				leaf show loop-value-1 to loop-value-2
				leaf show loop-value-2 to loop-value-1
			else:
				leaf hide loop-value-1 from loop-value-2
				leaf hide loop-value-2 from loop-value-1
		wait a tick		
	#	
	loop 4 times:	
		loop {-duels::cache::arena::%{_arena}%::ninjas::*}:
			set {_title} to ""
			set {_subtitle} to ""		
			if loop-number = 1:
				set {_title} to "&c&n3"		
			if loop-number = 2:
				set {_title} to "&6&n2"		
			if loop-number = 3:
				set {_title} to "&e&n1"	
			if loop-number = 4:
				set {_title} to "&aFight!"		
				duels_play_sound(loop-value-2, "LEVEL_UP", "ENTITY_PLAYER_LEVELUP")
				duels_kits_manager(loop-value-2, "give", {-duels::cache::arena::%{_arena}%::kit})
			else:
				duels_play_sound(loop-value-2, "NOTE_BASS", "BLOCK_NOTE_BLOCK_BASS")			
		#	loop-number != 2 or 3 or 4 or 5										
			leaf send title {_title} with subtitle {_subtitle} to loop-value-2 with 5 fadein and 5 fadeout for 20
		wait a second

on quit:
	if {-duels::cache::player::%player%::state} is set:
		duels_leave(player)
	unload yaml "leaf.duels.playerdata.%uuid of player%"	
	delete {-duels::cache::player::%player%::*}

on teleport:
	if {-duels::cache::player::%player%::state} is set:
		"%teleport cause%" is "SPECTATE"
		cancel event	

on break:
	if {-duels::cache::player::%player%::state} is "IN-GAME":
		if {-duels::cache::arena::%{-duels::cache::player::%player%::arena}%::status} is "IN-GAME":
			if {-duels::cache::arena::%{-duels::cache::player::%player%::arena}%::OMAE-MO-SHINDEIRU::%location of event-block%} is set:
				duels_stats(player, "add", "BlocksDestroyed")
				stop	
			else:
				cancel event
		else:
			cancel event

on place:
	if {-duels::cache::player::%player%::state} is "IN-GAME":	
		if {-duels::cache::arena::%{-duels::cache::player::%player%::arena}%::status} is "IN-GAME":
			if y-coords of event-block >= {-duels::cache::arena::%{-duels::cache::player::%player%::arena}%::MaxHeight}:
				cancel event
				stop
			duels_stats(player, "add", "BlocksPlaced")
			if {-duels::cache::arena::%{-duels::cache::player::%player%::arena}%::OMAE-MO-SHINDEIRU::%location of event-block%} is not set:
				set {-duels::cache::arena::%{-duels::cache::player::%player%::arena}%::OMAE-MO-SHINDEIRU::%location of event-block%} to location of event-block
		else:
			cancel event
			
on right click:
	if {-duels::cache::player::%player%::kitEdit} is set:
		cancel event

on PlayerArmorStandManipulateEvent:
	if {-duels::cache::player::%event.getPlayer()%::state} is set:	
		cancel event

on PlayerInteractEvent:
	if {-duels::cache::player::%event.getPlayer()%::state} is set:	
		if "%event.getAction()%" is "PHYSICAL":
			cancel event

on chat:
	if {-duels::cache::player::%player%::state} is set:
		set {_format} to replacer "{player}" and "{message}" with "%player%" and message in yaml value "Settings.ChatFormat" from "leaf.duels.config"
		loop "PlayedGames", "Wins", "Kills", "Loses", "BlocksDestroyed" and "BlocksPlaced":
			set {_int} to yaml value "Stats.%loop-value-1%" from "leaf.duels.playerdata.%uuid of player%"
			replace all "{%loop-value-1%}" with "%{_int}%" in {_format}
		set chat format to {_format}
		set chat recipients to {-duels::cache::arena::%{-duels::cache::player::%player%::arena}%::ninjas::*}

on drop:
	if {-duels::cache::player::%player%::state} is "IN-GAME":
		cancel event

on hunger bar change:	
	if {-duels::cache::player::%player%::state} is "IN-GAME":
		if {-duels::cache::arena::%{-duels::cache::player::%player%::arena}%::status} is "IN-GAME":
			stop
		set player's hunger to 20

function duels_gametime(arena: text):	
	set {-duels::cache::arena::%{_arena}%::minutes} to 9
	set {-duels::cache::arena::%{_arena}%::seconds} to 60
	while {-duels::cache::arena::%{_arena}%::status} is "IN-GAME":
		remove 1 from {-duels::cache::arena::%{_arena}%::seconds}
		if {-duels::cache::arena::%{_arena}%::seconds} is 0:
			set {-duels::cache::arena::%{_arena}%::seconds} to 59				
			remove 1 from {-duels::cache::arena::%{_arena}%::minutes}				
		if {-duels::cache::arena::%{_arena}%::minutes} = 0:
			if {-duels::cache::arena::%{_arena}%::seconds} <= 1:	
				duels_resetarena({_arena})	
				stop
		wait a second

function duels_show_blood(p: player):
	if {-duels::cache::player::%{_p}%::state} is set:
		set {_w} to world of {_p}
		set {_loc} to location of {_p}
		set {_material} to new MaterialData(Material.."REDSTONE_BLOCK")
		FastParticle.spawnParticle({_w}, ParticleType.BLOCK_CRACK, {_loc}, 3 and {_material})

function duels_win(arena: text, team: text):
	set {-duels::cache::arena::%{_arena}%::status} to "RESTARTING"
	set {_color} to yaml value "Settings.TeamFormat.Color.%{_team}%" from "leaf.duels.config"
	if {-duels::cache::arena::%{_arena}%::teamSize} > 1:
		set {_summary} to "Messages.Summary.Team"
	else:
		set {_summary} to "Messages.Summary.Solo"
	loop yaml list {_summary} from "leaf.duels.config":
		set {_msg} to loop-value-1
		replace all "{team}" with yaml value "Settings.TeamFormat.Name.%{_team}%" from "leaf.duels.config" in {_msg}
		replace all "{PlayerList}" with "%{_color}%%{-duels::cache::arena::%{_arena}%::team::%{_team}%::*}%" in {_msg}
		send centered colored {_msg} to {-duels::cache::arena::%{_arena}%::ninjas::*}
	loop {-duels::cache::arena::%{_arena}%::team::%{_team}%::*}:
		duels_stats(loop-value-1, "add", "Wins")
	loop 10 times:
		wait a second
	duels_resetarena({_arena})

function duels_remove_from_game(p: player, quit: boolean = false):
	set {_arena} to {-duels::cache::player::%{_p}%::arena}
	if {_quit} is true:
		remove {_p} from {-duels::cache::arena::%{_arena}%::ninjas::*}
	remove {_p} from {-duels::cache::arena::%{_arena}%::team::%{-duels::cache::player::%{_p}%::team}%::*}
	set {_teamList::*} to "Red" and "Blue"
	loop {_teamList::*}:
		if size of {-duels::cache::arena::%{_arena}%::team::%loop-value-1%::*} < 1:
			remove loop-value-1 from {_teamList::*}
	if size of {_teamList::*} = 1:
		set {_team} to random element out of {_teamList::*}
		duels_win({_arena}, {_team})
	if size of {-duels::cache::arena::%{_arena}%::ninjas::*} = 0 or 1:
		if {-duels::cache::arena::%{_arena}%::status} != "RESTARTING":
			duels_resetarena({_arena})	


function duels_player_death(p: player):
	if metadata value "DUELS_DEAD" of {_p} is set:
		stop
	set metadata value "DUELS_DEAD" of {_p} to true
	duels_show_blood({_p})
	create lightning effect at {_p}
	set {_killer} to "%metadata value ""DUELS_KILLER"" of {_p}%" parsed as player
	duels_clear_player({_p})	
	set {_p}'s gamemode to spectator	
	FastParticle.spawnParticle({_p}.getWorld(), ParticleType.EXPLOSION_NORMAL, {_p}.getLocation() and 1)
	set {_random} to a random element out of {-duels::cache::arena::%{-duels::cache::player::%{_p}%::arena}%::ninjas::*}
	teleport {_p} to {_random}
	set {_victimColor} to yaml value "Settings.TeamFormat.Color.%{-duels::cache::player::%{_p}%::team}%" from "leaf.duels.config"	
	duels_stats({_p}, "add", "Loses")
	if {_killer} is set:
		duels_stats({_killer}, "add", "Kills")
		add 1 to {-duels::cache::player::%{_killer}%::GameKills}
		set {_killerColor} to yaml value "Settings.TeamFormat.Color.%{-duels::cache::player::%{_killer}%::team}%" from "leaf.duels.config"
		send replacer "{victim}" and "{killer}" and "{victimColor}" and "{killerColor}" with "%{_p}%" and "%{_killer}%" and "%{_victimColor}%" and "%{_killerColor}%" in yaml value "Messages.Killed" from "leaf.duels.config" to {-duels::cache::arena::%{-duels::cache::player::%{_p}%::arena}%::ninjas::*}
	else:
		send replacer "{victim}" and "{victimColor}" with "%{_p}%" and "%{_victimColor}%" in yaml value "Messages.Death" from "leaf.duels.config" to {-duels::cache::arena::%{-duels::cache::player::%{_p}%::arena}%::ninjas::*}
	loop {-duels::cache::arena::%{-duels::cache::player::%{_p}%::arena}%::ninjas::*}:
		if metadata value "DUELS_KILLER" of loop-value-1 is "%{_p}%":
			delete metadata value "DUELS_KILLER" of loop-value-1
	duels_remove_from_game({_p})
	
on damage of player:
	if {-duels::cache::player::%victim%::state} is "IN-GAME":
		if {-duels::cache::arena::%{-duels::cache::player::%victim%::arena}%::status} is "IN-GAME":
			if {-duels::cache::player::%attacker%::team} is {-duels::cache::player::%victim%::team}:
				cancel event
				stop			
			duels_show_blood(victim)
			set metadata value "DUELS_KILLER" of victim to metadata value "DUELS_OWNER" of attacker	
			if damage cause is void:
				cancel event	
				duels_player_death(victim)
				stop						
			if damage >= health of victim:
				cancel event	
				duels_player_death(victim)
		else:
			cancel event 							

function duels_resetarena(arena: text):
	set {-duels::cache::arena::%{_arena}%::status} to "RESTARTING"
	loop {-duels::cache::arena::%{_arena}%::ninjas::*}:
		teleport loop-value-1 to yaml value "Locations.Lobby" from "leaf.duels.config"
		delete scoreboard of loop-value-1		
		delete {-duels::cache::player::%loop-value-1%::*}				
		duels_clear_player(loop-value-1)	
		duels_tab_support(loop-value-1, "Clear")
		duels_inventory_manager(loop-value-1, "restore")
		wait a tick	
	#Free Region	
	replace blocks between {-duels::cache::arena::%{_arena}%::Position1} and {-duels::cache::arena::%{_arena}%::Position2} with air
	wait a second	
	delete {-duels::cache::ArenaGenerator::Region::%{-duels::cache::arena::%{_arena}%::PasteCoords}%}	
	#Free Region		
	delete {-duels::cache::arena::%{_arena}%::*}		
							
function duels_setSlot(p: player, slot: number, t: text):
	add "&a", "&b", "&c", "&d", "&e", "&1", "&2", "&3", "&4", "&5", "&6", "&7", "&8", "&9" and "&f" to {_d::*}
	if {_slot} is between 1 and 15: 
		set scoreboard line {_slot} of {_p} to "%{_d::%{_slot}%}%%{_t}%"		
	
function duels_getOpponentDirection(p: player, target: location) :: text:
	set {_vector} to {_target}.toVector().subtract({_p}.getLocation().toVector())
	set {_direction} to {_p}.getEyeLocation().getDirection()
	set {_angle} to {_vector}.angle({_direction})
	set {_r} to {_angle} * 180 / 3.14159265359
	set {_directions::*} to "⬆", "⬅", "⬇" and "➡"
	set {_values::*} to 45, 135, 225 and 315	
	loop {_values::*}:
		{_r} < loop-value-1
		if {_r} > 45:
			if {_r} <= 135:
				if {_vector}.crossProduct({_direction}).getY() > 0.0:
					return "➡"
				else:
					return "⬅"
		return {_directions::%loop-index%}

function duels_createBoard(p: player, t: text):
	set {_arena} to {-duels::cache::player::%{_p}%::arena}
	create scoreboard for {_p}
	add "&a", "&b", "&c", "&d", "&e", "&1", "&2", "&3", "&4", "&5", "&6", "&7", "&8", "&9" and "&f" to {_d::*}	
	if {_t} is "DUELS-GAME":
		set scoreboard title of {_p} to yaml value "Scoreboard.Game.Name" from "leaf.duels.config"
		loop {-duels::cache::arena::%{_arena}%::ninjas::*}:
			if loop-value-1 is not {_p}:
				set {-duels::cache::player::%{_p}%::opponent} to loop-value-1	
		while {-duels::cache::player::%{_p}%::arena} = {_arena}:	
			if {-duels::cache::arena::%{-duels::cache::player::%{_p}%::arena}%::status} is "IN-GAME":	
				set {_slot} to 1 
				set {_direction} to duels_getOpponentDirection({_p}, location of {-duels::cache::player::%{_p}%::opponent})
				loop yaml list "Scoreboard.Game.Lines" from "leaf.duels.config":
					set {_score} to "%loop-value-1%"
					replace all "{now}" with "%now%" in {_score}
					replace all "{player}" with {_p}'s display name in {_score}				
					replace all "{Opponent}" with "%{-duels::cache::player::%{_p}%::opponent}%" in {_score}
					replace all "{OpponentHealth}" with "%{-duels::cache::player::%{_p}%::opponent}'s health%" in {_score}					
					replace all "{Direction}" with "%{_direction}%" in {_score}
					replace all "{mode}" with "%{-duels::cache::arena::%{_arena}%::kit}%" in {_score}
					replace all "{team}" with yaml value "Settings.TeamFormat.Name.%{-duels::cache::player::%{_p}%::team}%" from "leaf.duels.config" in {_score}	
					if {-duels::cache::arena::%{_arena}%::seconds} <= 9:	
						replace all "{game-time}" with "%{-duels::cache::arena::%{_arena}%::minutes}%:0%{-duels::cache::arena::%{_arena}%::seconds}%" in {_score}
					if {-duels::cache::arena::%{_arena}%::seconds} > 9:
						replace all "{game-time}" with "%{-duels::cache::arena::%{_arena}%::minutes}%:%{-duels::cache::arena::%{_arena}%::seconds}%" in {_score}										
					duels_setSlot({_p}, {_slot}, colored {_score})
					add 1 to {_slot}
			else:
				stop							
			wait a second	

function duels_reloadKits():
	loop yaml nodes with keys "Kits" from "leaf.duels.kits":
		if yaml value "Kits.%loop-value-1%.Display.Item" from "leaf.duels.kits" parsed as material is set:
			set {-duels::cache::kits::%loop-value-1%::display} to yaml value "Kits.%loop-value-1%.Display.Item" from "leaf.duels.kits" parsed as material with custom nbt "{Unbreakable:1,HideFlags:4}"
			set {-duels::cache::kits::%loop-value-1%::display} to {-duels::cache::kits::%loop-value-1%::display} with leaf lore yaml list "Kits.%loop-value-1%.Display.Lore" from "leaf.duels.kits"
			set name of {-duels::cache::kits::%loop-value-1%::display} to yaml value "Kits.%loop-value-1%.Display.Name" from "leaf.duels.kits"
		else:
			set {_i} to yaml value "Kits.%loop-value-1%.Display.Item" from "leaf.duels.kits"
			broadcast "QuickDuels: Error with display item %{_i}%"

on load:
	loop all players:
		if {-duels::cache::player::%loop-value-1%::kitEdit} or {-duels::cache::player::%loop-value-1%::state} is set:
			teleport loop-value-1 to yaml value "Locations.Lobby" from "leaf.duels.config"
		duels_stats(loop-value-1, "check")	
		wait a tick
	loop currently loaded yaml files:
		loop-value contains "leaf.duels.config" or "leaf.duels.playerdata" or "leaf.duels.kits" or "leaf.duels.maps"  
		unload yaml loop-value-1	
	delete {-duels::cache::*}				
	loop "config" and "kits":
		load yaml "plugins/QuickDuels/%loop-value-1%.yml" as "leaf.duels.%loop-value-1%"		
	load yaml "plugins/QuickDuels/maps/maps.yml" as "leaf.duels.maps"			
	check_yaml("config", "Settings.ChatFormat", "&a{Wins} &8✦ &7{player} &8» &7{message}")														
	check_yaml("config", "Settings.TeamFormat.Color.Red", "&c")		
	check_yaml("config", "Settings.TeamFormat.Name.Red", "&c&nRed&r")	
	check_yaml("config", "Settings.TeamFormat.Color.Blue", "&b")	
	check_yaml("config", "Settings.TeamFormat.Name.Blue", "&b&nBlue&r")		
	check_yaml("config", "Settings.MaxHeight", "60", "number")													
	check_yaml("config", "Menus.KitEdit.Menu", "&8︼︼ &7Select Kit &8︼︼")	
	check_yaml("config", "Menus.Play.Menu", "&8︼︼ &7QuickDuels Play &8︼︼")			
	check_yaml("config", "Menus.Play.Size", "5", "number")		
	check_yaml("config", "Menus.Play.Cancel.Item", "red dye")	
	check_yaml("config", "Menus.Play.Cancel.Name", "&cLeave queque.")	
	check_yaml("config", "Menus.Play.Cancel.Slot", "44", "number")		
	check_yaml("config", "Menus.Stats.Menu", "&8︼︼ &7QuickDuels Stats &8︼︼")		
	check_yaml("config", "Menus.Stats.Name", "&8➭ &e&nYour Stats&r")	
	check_yaml("config", "Menus.Stats.Lore", "||&8♦ &7PlayedGames &a{PlayedGames}||&8♦ &7Wins &a{Wins}||&8♦ &7Kills &a{Kills}||&8♦ &7Deaths &a{Deaths}||&8♦ &7BlocksPlaced &a{BlocksPlaced}||&8♦ &7BlocksDestroyed &a{BlocksDestroyed}", "list")			
	check_yaml("config", "Scoreboard.Game.Name", "&eQuick Duels") 	
	check_yaml("config", "Scoreboard.Game.Lines", "&7{now}||||&7❒ &fTime Left ⤵||||&8➥ &a{game-time}||||&7❒ &fOpponent ⤵||||&7{Direction} &a{Opponent} &a{OpponentHealth}&c❤||||&7❒ &fMode ⤵||||&8➥ &a&7{mode}||||&eplay.my-cool-server.net", "list")		
	check_yaml("config", "Messages.OpponentFound", "&a➜ &7Found Opponent.")		
	check_yaml("config", "Messages.SearchingOpponent", "&c➜ &7Searching Opponent...")		
	check_yaml("config", "Messages.SearchingArena", "&c➜ &7Searching Arena...")		
	check_yaml("config", "Messages.AlreadySearching", "&c➜ &7You are already searching for a fight.")	
	check_yaml("config", "Messages.Join", "&7{player} &ehas joined to the game.")	
	check_yaml("config", "Messages.Leave", "&7{player} &eleft the game.")
	check_yaml("config", "Messages.Death", "&c➜ {victimColor}{victim} &7died")	
	check_yaml("config", "Messages.Killed", "&c➜ {victimColor}{victim} &7was killed by {killerColor}{killer}")		
	check_yaml("config", "Messages.Starting", "&eThe game starts in &a{seconds} &eseconds")	
	check_yaml("config", "Messages.AlreadyPlaying", "&eYou are already playing!")		
	check_yaml("config", "Messages.Summary.Solo", "&a︼︼︼︼︼︼︼︼︼︼︼︼︼︼︼︼︼︼︼︼︼︼︼︼︼||||&e✦ &6Quick Duels &e✦||||&7Winner &8➭ {PlayerList}||||&a︻︻︻︻︻︻︻︻︻︻︻︻︻︻︻︻︻︻︻︻︻︻︻︻︻", "list")			
	check_yaml("config", "Messages.Summary.Team", "&a︼︼︼︼︼︼︼︼︼︼︼︼︼︼︼︼︼︼︼︼︼︼︼︼︼||||&e✦ &6Quick Duels &e✦||||&7Winner &8➭ {team}, {PlayerList}||||&a︻︻︻︻︻︻︻︻︻︻︻︻︻︻︻︻︻︻︻︻︻︻︻︻︻", "list")			
	loop yaml nodes with keys "" from "leaf.duels.maps":
		if yaml value "%loop-value-1%.State" from "leaf.duels.maps" is "ready":
			add loop-value-1 to {-duels::cache::maps::*}	
	duels_reloadKits()		
	set {-duels::cache::TitleManager} to Bukkit.getServer().getPluginManager().getPlugin("TitleManager")	
	set {-duels::cache::Items::Cancel} to yaml value "Menus.Play.Cancel.Item" from "leaf.duels.config" parsed as material named yaml value "Menus.Play.Cancel.Name" from "leaf.duels.config"
	set {-duels::cache::TabPlugin::TAB} to class "me.neznamy.tab.api.TABAPI"
	set {-duels::cache::TabPlugin::TABEnumProperty} to class "me.neznamy.tab.api.EnumProperty"		
	send "&7&l--------------------------------------------" to console
	send " " to console
	send "&aLoading &ev.{@plugin-version}&a..." to console
	broadcast "&7⚙&e〉&a&aQuickDuels loaded!"
	send " " to console
	send "&7&l--------------------------------------------" to console	
	if yaml value "Locations.Lobby" from "leaf.duels.config" is not set:
		broadcast "&7⚙&e〉&a&cQuickDuels lobby is not set!."
	if yaml value "Locations.KitEditor" from "leaf.duels.config" is not set:
		broadcast "&7⚙&e〉&a&cQuickDuels kit editor location is not set!."	
	loop "config", "maps" and "kits":	
		save yaml "leaf.duels.%loop-value-1%"	

on unload:
	send "&7&l--------------------------------------------" to console
	send " " to console
	send "&aDisabling &ev.{@plugin-version}&a..." to console
	send "&ev.{@plugin-version} &adisabled!" to console
	send " " to console
	send "&7&l--------------------------------------------" to console				

#El Psy Kongroo